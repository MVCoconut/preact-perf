{
  "name": "preact",
  "amdName": "preact",
  "version": "2.6.1",
  "description": "Tiny & fast Component-based virtual DOM framework.",
  "main": "dist/preact.js",
  "jsnext:main": "src/preact.js",
  "minified:main": "dist/preact.min.js",
  "scripts": {
    "clean": "rimraf dist/",
    "build": "npm-run-all clean transpile minify size",
    "transpile": "rollup -c rollup.config.js -m -f umd -n $npm_package_amdName src/preact.js -o $npm_package_main",
    "minify": "uglifyjs $npm_package_main -cm -o $npm_package_minified_main -p relative --in-source-map ${npm_package_main}.map --source-map ${npm_package_minified_main}.map",
    "size": "size=$(gzip-size $npm_package_minified_main) && echo \"gzip size: $size / $(pretty-bytes $size)\"",
    "test": "eslint src test && npm run test:mocha && npm run test:karma",
    "test:mocha": "mocha --recursive --compilers js:babel/register test/shared test/node",
    "test:karma": "karma start --single-run",
    "test:mocha:watch": "npm run test:mocha -- --watch",
    "test:karma:watch": "npm run test:karma -- no-single-run",
    "prepublish": "npm run build",
    "release": "npm run build && npm test && git commit -am $npm_package_version && git tag $npm_package_version && git push && git push --tags && npm publish"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/developit/preact.git"
  },
  "author": {
    "name": "Jason Miller",
    "email": "jason@developit.ca"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/developit/preact/issues"
  },
  "homepage": "https://github.com/developit/preact",
  "devDependencies": {
    "babel": "^5.8.23",
    "babel-core": "^5.8.24",
    "babel-eslint": "^4.1.1",
    "babel-loader": "^5.3.2",
    "babel-runtime": "^5.8.24",
    "chai": "^3.4.1",
    "eslint": "^1.9.0",
    "gzip-size-cli": "^1.0.0",
    "karma": "^0.13.15",
    "karma-babel-preprocessor": "^5.2.2",
    "karma-chai": "^0.1.0",
    "karma-chai-sinon": "^0.1.5",
    "karma-mocha": "^0.2.0",
    "karma-mocha-reporter": "^1.1.1",
    "karma-phantomjs-launcher": "^0.2.1",
    "karma-sourcemap-loader": "^0.3.6",
    "karma-webpack": "^1.7.0",
    "mocha": "^2.3.3",
    "npm-run-all": "^1.3.3",
    "phantomjs": "^1.9.18",
    "pretty-bytes": "^2.0.1",
    "rimraf": "2.4.4",
    "rollup": "^0.21.1",
    "rollup-plugin-babel": "^1.0.0",
    "sinon": "^1.17.2",
    "sinon-chai": "^2.8.0",
    "uglify-js": "^2.6.0",
    "webpack": "^1.12.4"
  },
  "readme": "# Preact\n\n[![npm](https://img.shields.io/npm/v/preact.svg)](http://npm.im/preact)\n[![travis](https://travis-ci.org/developit/preact.svg)](https://travis-ci.org/developit/preact)\n[![gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/developit/preact)\n\n\nPreact is an attempt to recreate the core value proposition of React _(or similar libraries like Mithril)_ using as little code as possible, with first-class support for ES2015.  Currently the library is around **3kb** (minified & gzipped).\n\nIt retains a large amount of compatibility with React, but only the [stateless functional components](https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#stateless-functional-components) and [ES6 Classes] interface.  As one would expect coming from React, Components are simple building blocks for composing a User Interface.\n\n\n## Demos\n\n- [ESBench](http://esbench.com) is built using Preact.\n- [Documentation Viewer](https://documentation-viewer.firebaseapp.com) _([Github Project](https://github.com/developit/documentation-viewer))_\n- [TodoMVC](http://developit.github.io/preact-todomvc/) _([Github Project](https://github.com/developit/preact-todomvc))_\n- [Flickr Browser](http://codepen.io/developit/full/VvMZwK/) (@ CodePen)\n- [Animating Text](http://codepen.io/developit/full/LpNOdm/) (@ CodePen)\n- [60FPS Rainbow Spiral](http://codepen.io/developit/full/xGoagz/) (@ CodePen)\n- [Simple Clock](http://jsfiddle.net/developit/u9m5x0L7/embedded/result,js/) (@ JSFiddle)\n- [**Create your Own!**](https://jsfiddle.net/developit/rs6zrh5f/embedded/result/) (@ JSFiddle)\n\n\n## Libraries & Add-ons\n\n- :earth_americas: [**preact-router**](http://git.io/preact-router): URL routing for your components.\n- :tulip: [**preact-svg**](http://git.io/preact-svg): Use inline `<svg>` in Preact.\n- :page_facing_up: [**preact-render-to-string**](http://git.io/preact-render-to-string): Universal rendering.\n- :raised_hands: [**preact-compat**](http://git.io/preact-compat): use any React library with Preact. *([full example](http://git.io/preact-compat-example))*\n- :rocket: [**preact-photon**](http://git.io/preact-photon): build beautiful desktop UI with [photon](http://photonkit.com).\n\n\n## Getting Started\n\n> :information_desk_person: You don't _have_ to use ES2015 to use Preact... but you should.\n\nThe following guide assumes you have some sort of ES2015 build set up using babel and/or webpack/browserify/gulp/grunt/etc.  If you don't, start with [preact-boilerplate] or a [CodePen Template](http://codepen.io/developit/pen/PPMNjd?editors=001).\n\n\n### Import what you need\n\nThe `preact` module provides both named and default exports, so you can either import everything under a namespace of your choosing, or just what you need as locals:\n\n##### Named:\n\n```js\nimport { h, render, Component } from 'preact';\n\n// Tell Babel to transform JSX into h() calls:\n/** @jsx h */\n```\n\n##### Default:\n\n```js\nimport preact from 'preact';\n\n// Tell Babel to transform JSX into preact.h() calls:\n/** @jsx preact.h */\n```\n\n> Named imports work well for highly structured applications, whereas the default import is quick and never needs to be updated when using different parts of the library.\n>\n> Instead of declaring the `@jsx` pragma in your code, it's best to configure it globally in a `.babelrc`:\n>\n> ```js\n> { \"jsxPragma\": \"h\" }\n> ```\n\n\n### Rendering JSX\n\nOut of the box, Preact provides an `h()` function that turns your JSX into Virtual DOM elements _([here's how](http://jasonformat.com/wtf-is-jsx))_. It also provides a `render()` function that creates a DOM tree from that Virtual DOM.\n\nTo render some JSX, just import those two functions and use them like so:\n\n```js\nimport { h, render } from 'preact';\n\nrender((\n\t<div id=\"foo\">\n\t\t<span>Hello, world!</span>\n\t\t<button onClick={ e => alert(\"hi!\"); }>Click Me</button>\n\t</div>\n), document.body);\n```\n\nThis should seem pretty straightforward if you've used [hyperscript] or one of its many friends.\n\nRendering hyperscript with a virtual DOM is pointless, though. We want to render components and have them updated when data changes - that's where the power of virtual DOM diffing shines. :star2:\n\n\n### Components\n\nPreact exports a generic `Component` class, which can be extended to build encapsulated, self-updating pieces of a User Interface.  Components support all of the standard React [lifecycle methods], like `shouldComponentUpdate()` and `componentWillReceiveProps()`.  Providing specific implementations of these methods is the preferred mechanism for controlling _when_ and _how_ components update.\n\nComponents also have a `render()` method, but unlike React this method is passed `(props, state)` as arguments. This provides an ergonomic means to destructure `props` and `state` into local variables to be referenced from JSX.\n\nLet's take a look at a very simple `Clock` component, which shows the current time.\n\n```js\nimport { h, render, Component } from 'preact';\n\nclass Clock extends Component {\n\trender() {\n\t\tlet time = new Date().toLocaleTimeString();\n\t\treturn <span>{ time }</span>;\n\t}\n}\n\n// render an instance of Clock into <body>:\nrender(<Clock />, document.body);\n```\n\n\nThat's great. Running this produces the following HTML DOM structure:\n\n```html\n<span>10:28:57 PM</span>\n```\n\nIn order to have the clock's time update every second, we need to know when `<Clock>` gets mounted to the DOM. _If you've used HTML5 Custom Elements, this is similar to the `attachedCallback` and `detachedCallback` lifecycle methods._ Preact invokes the following lifecycle methods if they are defined for a Component:\n\n| Lifecycle method            | When it gets called                              |\n|-----------------------------|--------------------------------------------------|\n| `componentWillMount`        | before the component gets mounted to the DOM     |\n| `componentDidMount`         | after the component gets mounted to the DOM      |\n| `componentWillUnmount`      | prior to removal from the DOM                    |\n| `componentDidUnmount`       | after removal from the DOM                       |\n| `componentWillReceiveProps` | before new props get accepted                    |\n| `shouldComponentUpdate`     | before `render()`. Return `false` to skip render |\n| `componentWillUpdate`       | before `render()`                                |\n| `componentDidUpdate`        | after `render()`                                 |\n\n\n\nSo, we want to have a 1-second timer start once the Component gets added to the DOM, and stop if it is removed. We'll create the timer and store a reference to it in `componentDidMount`, and stop the timer in `componentWillUnmount`. On each timer tick, we'll update the component's `state` object with a new time value. Doing this will automatically re-render the component.\n\n```js\nimport { h, render, Component } from 'preact';\n\nclass Clock extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\t// set initial time:\n\t\tthis.state.time = Date.now();\n\t}\n\n\tcomponentDidMount() {\n\t\t// update time every second\n\t\tthis.timer = setInterval(() => {\n\t\t\tthis.setState({ time: Date.now() });\n\t\t}, 1000);\n\t}\n\n\tcomponentWillUnmount() {\n\t\t// stop when not renderable\n\t\tclearInterval(this.timer);\n\t}\n\n\trender(props, state) {\n\t\tlet time = new Date(state.time).toLocaleTimeString();\n\t\treturn <span>{ time }</span>;\n\t}\n}\n\n// render an instance of Clock into <body>:\nrender(<Clock />, document.body);\n```\n\nNow we have [a ticking clock](http://jsfiddle.net/developit/u9m5x0L7/embedded/result,js/)!\n\n\n### Props & State\n\nThe concept (and nomenclature) for `props` and `state` is the same as in React. `props` are passed to a component by defining attributes in JSX, `state` is internal state. Changing either triggers a re-render, though by default Preact re-renders Components asynchronously for `state` changes and synchronously for `props` changes.  You can tell Preact to render `prop` changes asynchronously by setting `options.syncComponentUpdates` to `false`.\n\n\n---\n\n\n## Linked State\n\nOne area Preact takes a little further than React is in optimizing state changes. A common pattern in ES2015 React code is to use Arrow functions within a `render()` method in order to update state in response to events.  Creating functions enclosed in a scope on every render is inefficient and forces the garbage collector to do more work than is necessary.\n\nOne solution to this is to bind component methods declaratively.\nHere is an example using [decko](http://git.io/decko):\n\n```js\nclass Foo extends Component {\n\t@bind\n\tupdateText(e) {\n\t\tthis.setState({ text: e.target.value });\n\t}\n\trender({ }, { text }) {\n\t\treturn <input value={text} onInput={this.updateText} />;\n\t}\n}\n```\n\nWhile this achieves much better runtime performance, it's still a lot of unnecessary code to wire up state to UI.\n\nFortunately there is a solution, in the form of `linkState()`. Calling `component.linkState('text')` returns a function that accepts an Event and uses it's associated value to update the given property in your component's state. Calls to linkState() with the same state property are cached, so there is no performance penalty.  Here is the previous example rewritten using _Linked State_:\n\n```js\nclass Foo extends Component {\n\trender({ }, { text }) {\n\t\treturn <input value={text} inInput={this.linkState('text')} />;\n\t}\n}\n```\n\nSimple and effective. It handles linking state from any input type, or an optional second parameter can be used to explicitly provide a keypath to the new state value.\n\n\n## Examples\n\nHere is a somewhat verbose Preact `<Link>` component:\n\n```js\nclass Link extends Component {\n\trender(props, state) {\n\t\treturn <a href={ props.href }>{ props.children }</a>;\n\t}\n}\n```\n\nSince this is ES6/ES2015, we can further simplify:\n\n```js\nclass Link extends Component {\n\trender({ href, children }) {\n\t\treturn <a {...{ href, children }} />;\n\t}\n}\n\n// or, for wide-open props support:\nclass Link extends Component {\n\trender(props) {\n\t\treturn <a {...props} />;\n\t}\n}\n\n// or, as a stateless functional component:\nconst Link = ({ children, ...props }) => (\n\t<a {...props}>{ children }</a>\n);\n```\n\n\n## Extensions\n\nIt is likely that some projects based on Preact would wish to extend Component with great new functionality.\n\nPerhaps automatic connection to stores for a Flux-like architecture, or mixed-in context bindings to make it feel more like `React.createClass()`.  Just use ES2015 inheritance:\n\n```js\nclass BoundComponent extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.bind();\n\t}\n\tbind() {\n\t\tthis.binds = {};\n\t\tfor (let i in this) {\n\t\t\tthis.binds[i] = this[i].bind(this);\n\t\t}\n\t}\n}\n\n// example usage\nclass Link extends BoundComponent {\n\tclick() {\n\t\topen(this.href);\n\t}\n\trender() {\n\t\tlet { click } = this.binds;\n\t\treturn <span onclick={ click }>{ children }</span>;\n\t}\n}\n```\n\n\nThe possibilities are pretty endless here. You could even add support for rudimentary mixins:\n\n```js\nclass MixedComponent extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\t(this.mixins || []).forEach( m => Object.assign(this, m) );\n\t}\n}\n```\n\n\n## License\n\nMIT\n\n\n\n[ES6 Classes]: https://facebook.github.io/react/docs/reusable-components.html#es6-classes\n[hyperscript]: https://github.com/dominictarr/hyperscript\n[preact-boilerplate]: https://github.com/developit/preact-boilerplate\n[lifecycle methods]: https://facebook.github.io/react/docs/component-specs.html\n",
  "readmeFilename": "README.md",
  "gitHead": "d847cfc5b156b9692a05dec79a17eaf345a7c292",
  "_id": "preact@2.6.1",
  "_shasum": "c2916eb141a2db18d5c0c05ea56d6df244b49646",
  "_from": "preact@>=2.3.0 <3.0.0"
}
